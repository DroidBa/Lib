if (isModule.toBoolean()) {
  apply plugin: 'com.android.application'
} else {
  apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
  useLibrary 'org.apache.http.legacy'
  compileSdkVersion rootProject.ext.android.compileSdkVersion
  buildToolsVersion rootProject.ext.android.buildToolsVersion

  defaultConfig {
    minSdkVersion rootProject.ext.android.minSdkVersion
    targetSdkVersion rootProject.ext.android.targetSdkVersion
    versionCode rootProject.ext.android.versionCode
    versionName rootProject.ext.android.versionName
  }

  buildFeatures {
    viewBinding = true
  }

  signingConfigs {
    cgSign {
      if (isRelease.toBoolean()) {
        storeFile file(KEYSTORE_FILE_RELEASE)
      } else {
        storeFile file(KEYSTORE_FILE)
      }
      storePassword KEYSTORE_PASSWORD
      keyAlias KEY_ALIAS
      keyPassword KEY_PASSWORD
      v1SigningEnabled true
      v2SigningEnabled true
    }
  }

  buildTypes {
    debug {
      debuggable true
      minifyEnabled false
      zipAlignEnabled false
      shrinkResources false
      signingConfig signingConfigs.cgSign
    }

    release {
      debuggable false
      minifyEnabled false
      zipAlignEnabled false
      shrinkResources false
      signingConfig signingConfigs.cgSign
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = "1.8"
  }

  sourceSets {
    main {
      if (isModule.toBoolean()) {
        manifest.srcFile 'src/main/module/AndroidManifest.xml'
      } else {
        manifest.srcFile 'src/main/AndroidManifest.xml'
        //release模式下排除debug文件夹中的所有Java文件
        java {
          exclude 'debug/**'
        }
      }
    }
  }
}

kapt {
  arguments {
    arg("moduleName", project.getName())
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation rootProject.ext.cecilleo.base
  implementation project(':lib_data')
  implementation project(':lib_res')
  kapt rootProject.ext.dependencies.arouterCompiler
  kapt rootProject.ext.other.permissionKapt
  kapt rootProject.ext.jetpack.roomKapt
}
